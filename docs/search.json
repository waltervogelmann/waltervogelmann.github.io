[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Data Science Portfolio",
    "section": "",
    "text": "Welcome to my data science portfolio! This site shows my journey learning data science and analytics. Here you’ll find projects that demonstrate what I’ve learned and discovered.\n\n\nThis portfolio shows my work learning data science. Each project includes:\n\nMy code with documentation\nVisualizations I created\nWhat I learned and discovered\n\nI built this site using Quarto and host it on GitHub Pages.\n\n\n\n\nProgramming: Python, Pandas for data analysis\nVisualization: Creating charts with Matplotlib and Seaborn\nData Collection: Getting data from files, websites, and APIs\nAnalysis: Finding patterns and answering questions with data\n\n\n\n\n\n\n\nLearn how I explore datasets to find interesting patterns and answer questions.\n\n\n\nSee how I gather data from different sources and prepare it for analysis.\n\n\n\nSee how I tackle a data science project beginning to end.\n\n\n\nThanks for visiting! Feel free to explore my projects and see what I’m learning."
  },
  {
    "objectID": "index.html#about-this-portfolio",
    "href": "index.html#about-this-portfolio",
    "title": "Welcome to My Data Science Portfolio",
    "section": "",
    "text": "This portfolio shows my work learning data science. Each project includes:\n\nMy code with documentation\nVisualizations I created\nWhat I learned and discovered\n\nI built this site using Quarto and host it on GitHub Pages."
  },
  {
    "objectID": "index.html#skills-im-learning",
    "href": "index.html#skills-im-learning",
    "title": "Welcome to My Data Science Portfolio",
    "section": "",
    "text": "Programming: Python, Pandas for data analysis\nVisualization: Creating charts with Matplotlib and Seaborn\nData Collection: Getting data from files, websites, and APIs\nAnalysis: Finding patterns and answering questions with data"
  },
  {
    "objectID": "index.html#my-projects",
    "href": "index.html#my-projects",
    "title": "Welcome to My Data Science Portfolio",
    "section": "",
    "text": "Learn how I explore datasets to find interesting patterns and answer questions.\n\n\n\nSee how I gather data from different sources and prepare it for analysis.\n\n\n\nSee how I tackle a data science project beginning to end.\n\n\n\nThanks for visiting! Feel free to explore my projects and see what I’m learning."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects Overview",
    "section": "",
    "text": "Description: Pick a dataset and explore it to discover insights and answer questions.\n\n\n\nDescription: Find an interesting data source, collect the data, and prepare it for analysis.\n\n\n\nDescription: A comprehensive project that shows off my data science skills.",
    "crumbs": [
      "Projects Overview"
    ]
  },
  {
    "objectID": "projects/index.html#all-projects",
    "href": "projects/index.html#all-projects",
    "title": "Projects Overview",
    "section": "",
    "text": "Description: Pick a dataset and explore it to discover insights and answer questions.\n\n\n\nDescription: Find an interesting data source, collect the data, and prepare it for analysis.\n\n\n\nDescription: A comprehensive project that shows off my data science skills.",
    "crumbs": [
      "Projects Overview"
    ]
  },
  {
    "objectID": "projects/eda.html",
    "href": "projects/eda.html",
    "title": "EDA Project",
    "section": "",
    "text": "This is coming down the pipeline. Check again later.",
    "crumbs": [
      "EDA Project"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "![Walter Vogelmann headshot](WalterVogelmannHeadshot.png)"
  },
  {
    "objectID": "about.html#background",
    "href": "about.html#background",
    "title": "About Me",
    "section": "Background",
    "text": "Background\n\nI’m a highly motivated and versatile statistics student at Brigham Young University, where I am pursuing a Bachelor’s degree in Statistics and Data Analytics with Minors in Mathematics and French.\nI have built a strong academic foundation, with coursework in Bayesian Statistics, Tableau, SQL, Linux, and AWS.\nGaining hands-on experience through my role in the BYU Men’s Basketball Internship, where I work on statistical projects analyzing player performance and scouting.\nAlso involved in leadership roles, serving as President of the BYU Statistics Academic Association and as Financial Officer for the BYU Sports Analytics Club.\nFluent in French and proficient in R and Python, and I combine my analytical skills with strong communication, honed through teaching French and leading volunteer teams during my missionary service in France.\nMy adaptability, leadership, and teamwork skills make me an asset in both acade and professional environments."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\n\nApplied Statistics and Data Analytics - Brigham Young University, (Expected Graduation: April 2026)\nRelevant Coursework: Statistics, Data Analysis, Programming, Bayesian Theory, Sports Analytics, etc."
  },
  {
    "objectID": "about.html#skills-interests",
    "href": "about.html#skills-interests",
    "title": "About Me",
    "section": "Skills & Interests",
    "text": "Skills & Interests\n\nTechnical Skills\n\nProgramming: R, Python\nData Analysis: Pandas, NumPy\nVisualization: Matplotlib, Tableau\nMachine Learning: Scikit-learn\nTools: Jupyter Notebooks, Git/GitHub\n\n\n\nAreas of Interest\n\nI am very interested in Sports Analytics, as well as general industry applications of data analysis.\nI would love to get more experience in business analytics, statistical research, and even the teaching of statistics."
  },
  {
    "objectID": "about.html#goals",
    "href": "about.html#goals",
    "title": "About Me",
    "section": "Goals",
    "text": "Goals\nWhat I hope to achieve through my data science journey:\n\nHoping to obtain a Masters of Statistics, followed by industry work\nI want to eventually link my passion for sports with data analysis in a professional setting"
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "About Me",
    "section": "Contact",
    "text": "Contact\n\nEmail: walterjvogelmann@gmail.com\nGitHub: https://github.com/waltervogelmann\nLinkedIn: www.linkedin.com/in/wvogelmann\n\n\nThis portfolio showcases my learning progress and projects completed during my data science studies."
  },
  {
    "objectID": "projects/data-tutorial-blog.html",
    "href": "projects/data-tutorial-blog.html",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "A beginner-friendly guide to visualizing basketball performance data\n\n\n\nHave you ever wondered if playing more minutes actually leads to scoring more points in basketball? It seems obvious, but how strong is that relationship? In this tutorial, you’ll learn how to answer questions like this using Python, pandas, and matplotlib.\nWe’ll work through a complete workflow: - Loading and inspecting player statistics - Cleaning messy data - Creating a professional scatterplot - Adding a regression line to quantify the relationship\nBy the end, you’ll have a reusable template for exploring correlations in any sport or dataset.\n\n\n\n\nFirst, let’s load our basketball statistics and take a quick look at what we’re working with.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the data\ndf = pd.read_csv('player_stats.csv')\n\n# Display first few rows\nprint(df.head())\nHere’s what our dataset looks like:\n\n\n\nPlayer\nMinutes\nPoints\nRebounds\n\n\n\n\nLeBron James\n35.2\n27.1\n7.5\n\n\nStephen Curry\n34.3\n29.4\n5.2\n\n\nKevin Durant\n36.9\n29.7\n7.1\n\n\nGiannis Antetokounmpo\n32.8\n31.1\n11.6\n\n\nJoel Embiid\n33.1\n33.1\n10.2\n\n\n\nEach row represents a player’s per-game averages for the season.\n\n\n\n\nReal-world data is rarely perfect. Let’s check for issues and clean our dataset.\n# Check for missing values\nprint(df.isnull().sum())\n\n# Check data types\nprint(df.dtypes)\n\n# Remove any rows with missing values\ndf_clean = df.dropna()\n\n# Ensure Minutes and Points are numeric\ndf_clean['Minutes'] = pd.to_numeric(df_clean['Minutes'], errors='coerce')\ndf_clean['Points'] = pd.to_numeric(df_clean['Points'], errors='coerce')\n\n# Remove any rows that couldn't be converted to numeric\ndf_clean = df_clean.dropna()\n\nprint(f\"Dataset now has {len(df_clean)} complete records\") # Output: Dataset now has 20 complete records\nWhy this matters: Missing or incorrectly formatted data can cause errors or misleading visualizations. Always inspect and clean your data before analysis.\n\n\n\n\nNow for the fun part—visualizing the relationship between minutes played and points scored.\n# Create figure and axis\nplt.figure(figsize=(10, 6))\n\n# Create scatterplot\nplt.scatter(df_clean['Minutes'], df_clean['Points'], \n            alpha=0.6, s=100, color='steelblue', edgecolors='black')\n\n# Add labels and title\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Relationship Between Playing Time and Scoring', fontsize=14, fontweight='bold')\n\n# Add grid for readability\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\nHere’s what the visualization looks like:\n\n\n\nScatterplot showing the positive relationship between minutes played per game and points scored per game for NBA players\n\n\nThis scatterplot makes the positive relationship immediately visible—players who log more minutes tend to score more points.\n\n\n\n\nLet’s fit a regression line to quantify exactly how minutes relate to points.\n# Compute slope and intercept using NumPy\nx = df_clean['Minutes'].to_numpy()\ny = df_clean['Points'].to_numpy()\n\n# Calculate slope (m) and intercept (b) using least squares\nslope, intercept = np.polyfit(x, y, 1)\n\n# Compute predicted values for regression line\nline_x = np.array([x.min(), x.max()])\nline_y = slope * line_x + intercept\n\n# Compute R² manually\ny_pred = slope * x + intercept\nss_res = np.sum((y - y_pred) ** 2)\nss_tot = np.sum((y - np.mean(y)) ** 2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Plot scatterplot with regression line\nplt.figure(figsize=(10, 6))\nplt.scatter(x, y, alpha=0.6, s=100, color='steelblue', edgecolors='black', label='Players')\nplt.plot(line_x, line_y, color='red', linewidth=2, label='Regression Line')\n\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Minutes vs. Points with Regression Line', fontsize=14, fontweight='bold')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# Display the equation and R²\nprint(f\"Regression equation: Points = {intercept:.2f} + {slope:.2f} × Minutes\") # Output: Regression equation: Points = 22.58 + 0.14 × Minutes \nprint(f\"R² = {r_squared:.3f}\") # Output: R² = 0.006\n\n\n\nScatterplot with red regression line showing the linear relationship between playing time and scoring output\n\n\nThe regression line helps us quantify this relationship precisely.\n\n\nOur regression equation is:\n\\[\\text{Points} = \\beta_0 + \\beta_1 \\cdot \\text{Minutes}\\]\nWhere: - \\(\\beta_0\\) (intercept) represents the baseline points when minutes = 0 - \\(\\beta_1\\) (slope) tells us how many additional points we expect per additional minute played\nFor example, if our equation is:\n\\[\\text{Points} = -5.23 + 1.02 \\cdot \\text{Minutes}\\]\nThis means each additional minute played is associated with approximately 1.02 more points per game.\nThe \\(R^2\\) value tells us what percentage of the variation in points can be explained by minutes played. An \\(R^2\\) of 0.65 means minutes explain 65% of the scoring variation.\n\n\n\n\n\nCongratulations! You’ve just completed a full data analysis workflow:\n✅ Loaded and inspected real data\n✅ Cleaned and prepared it for analysis\n✅ Created a professional visualization\n✅ Quantified relationships with linear regression\n\n\nTry this yourself: Clone this GitHub repository and run the Jupyter notebook. Then, modify the code to explore different relationships:\n\nHockey fans: Download NHL data and analyze shots vs. goals\nSoccer enthusiasts: Explore assists vs. goals scored\nBaseball lovers: Investigate at-bats vs. home runs\n\nHave fun experimenting, and share your results with others, myself included!\nWant to go deeper? Check out these resources: - Pandas documentation on data cleaning - Matplotlib gallery for plot inspiration - Understanding correlation vs. causation\nHappy analyzing! 📊🏀\n\nPublished on October 24, 2025 | Walter Vogelmann",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/final-project.html",
    "href": "projects/final-project.html",
    "title": "Final Project",
    "section": "",
    "text": "This is coming down the pipeline. Check again later.",
    "crumbs": [
      "Final Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#introduction",
    "href": "projects/data-tutorial-blog.html#introduction",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Have you ever wondered if playing more minutes actually leads to scoring more points in basketball? It seems obvious, but how strong is that relationship? In this tutorial, you’ll learn how to answer questions like this using Python, pandas, and matplotlib.\nWe’ll work through a complete workflow: - Loading and inspecting player statistics - Cleaning messy data - Creating a professional scatterplot - Adding a regression line to quantify the relationship\nBy the end, you’ll have a reusable template for exploring correlations in any sport or dataset.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-1-load-and-inspect-the-data",
    "href": "projects/data-tutorial-blog.html#step-1-load-and-inspect-the-data",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "First, let’s load our basketball statistics and take a quick look at what we’re working with.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the data\ndf = pd.read_csv('player_stats.csv')\n\n# Display first few rows\nprint(df.head())\nHere’s what our dataset looks like:\n\n\n\nPlayer\nMinutes\nPoints\nRebounds\n\n\n\n\nLeBron James\n35.2\n27.1\n7.5\n\n\nStephen Curry\n34.3\n29.4\n5.2\n\n\nKevin Durant\n36.9\n29.7\n7.1\n\n\nGiannis Antetokounmpo\n32.8\n31.1\n11.6\n\n\nJoel Embiid\n33.1\n33.1\n10.2\n\n\n\nEach row represents a player’s per-game averages for the season.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-2-clean-and-prepare-the-data",
    "href": "projects/data-tutorial-blog.html#step-2-clean-and-prepare-the-data",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Real-world data is rarely perfect. Let’s check for issues and clean our dataset.\n# Check for missing values\nprint(df.isnull().sum())\n\n# Check data types\nprint(df.dtypes)\n\n# Remove any rows with missing values\ndf_clean = df.dropna()\n\n# Ensure Minutes and Points are numeric\ndf_clean['Minutes'] = pd.to_numeric(df_clean['Minutes'], errors='coerce')\ndf_clean['Points'] = pd.to_numeric(df_clean['Points'], errors='coerce')\n\n# Remove any rows that couldn't be converted to numeric\ndf_clean = df_clean.dropna()\n\nprint(f\"Dataset now has {len(df_clean)} complete records\") # Output: Dataset now has 20 complete records\nWhy this matters: Missing or incorrectly formatted data can cause errors or misleading visualizations. Always inspect and clean your data before analysis.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-3-create-the-scatterplot",
    "href": "projects/data-tutorial-blog.html#step-3-create-the-scatterplot",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Now for the fun part—visualizing the relationship between minutes played and points scored.\n# Create figure and axis\nplt.figure(figsize=(10, 6))\n\n# Create scatterplot\nplt.scatter(df_clean['Minutes'], df_clean['Points'], \n            alpha=0.6, s=100, color='steelblue', edgecolors='black')\n\n# Add labels and title\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Relationship Between Playing Time and Scoring', fontsize=14, fontweight='bold')\n\n# Add grid for readability\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\nHere’s what the visualization looks like:\n\n\n\nScatterplot showing the positive relationship between minutes played per game and points scored per game for NBA players\n\n\nThis scatterplot makes the positive relationship immediately visible—players who log more minutes tend to score more points.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-4-quantify-the-relationship-with-linear-regression",
    "href": "projects/data-tutorial-blog.html#step-4-quantify-the-relationship-with-linear-regression",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Let’s fit a regression line to quantify exactly how minutes relate to points.\n# Compute slope and intercept using NumPy\nx = df_clean['Minutes'].to_numpy()\ny = df_clean['Points'].to_numpy()\n\n# Calculate slope (m) and intercept (b) using least squares\nslope, intercept = np.polyfit(x, y, 1)\n\n# Compute predicted values for regression line\nline_x = np.array([x.min(), x.max()])\nline_y = slope * line_x + intercept\n\n# Compute R² manually\ny_pred = slope * x + intercept\nss_res = np.sum((y - y_pred) ** 2)\nss_tot = np.sum((y - np.mean(y)) ** 2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Plot scatterplot with regression line\nplt.figure(figsize=(10, 6))\nplt.scatter(x, y, alpha=0.6, s=100, color='steelblue', edgecolors='black', label='Players')\nplt.plot(line_x, line_y, color='red', linewidth=2, label='Regression Line')\n\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Minutes vs. Points with Regression Line', fontsize=14, fontweight='bold')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# Display the equation and R²\nprint(f\"Regression equation: Points = {intercept:.2f} + {slope:.2f} × Minutes\") # Output: Regression equation: Points = 22.58 + 0.14 × Minutes \nprint(f\"R² = {r_squared:.3f}\") # Output: R² = 0.006\n\n\n\nScatterplot with red regression line showing the linear relationship between playing time and scoring output\n\n\nThe regression line helps us quantify this relationship precisely.\n\n\nOur regression equation is:\n\\[\\text{Points} = \\beta_0 + \\beta_1 \\cdot \\text{Minutes}\\]\nWhere: - \\(\\beta_0\\) (intercept) represents the baseline points when minutes = 0 - \\(\\beta_1\\) (slope) tells us how many additional points we expect per additional minute played\nFor example, if our equation is:\n\\[\\text{Points} = -5.23 + 1.02 \\cdot \\text{Minutes}\\]\nThis means each additional minute played is associated with approximately 1.02 more points per game.\nThe \\(R^2\\) value tells us what percentage of the variation in points can be explained by minutes played. An \\(R^2\\) of 0.65 means minutes explain 65% of the scoring variation.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#conclusion-your-turn-to-explore",
    "href": "projects/data-tutorial-blog.html#conclusion-your-turn-to-explore",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Congratulations! You’ve just completed a full data analysis workflow:\n✅ Loaded and inspected real data\n✅ Cleaned and prepared it for analysis\n✅ Created a professional visualization\n✅ Quantified relationships with linear regression\n\n\nTry this yourself: Clone this GitHub repository and run the Jupyter notebook. Then, modify the code to explore different relationships:\n\nHockey fans: Download NHL data and analyze shots vs. goals\nSoccer enthusiasts: Explore assists vs. goals scored\nBaseball lovers: Investigate at-bats vs. home runs\n\nHave fun experimenting, and share your results with others, myself included!\nWant to go deeper? Check out these resources: - Pandas documentation on data cleaning - Matplotlib gallery for plot inspiration - Understanding correlation vs. causation\nHappy analyzing! 📊🏀\n\nPublished on October 24, 2025 | Walter Vogelmann",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html",
    "href": "projects/data-tutorial-blog.html",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "A beginner-friendly guide to visualizing basketball performance data\n\n\n\nHave you ever wondered if playing more minutes actually leads to scoring more points in basketball? It seems obvious, but how strong is that relationship? In this tutorial, you’ll learn how to answer questions like this using Python, pandas, and matplotlib.\nWe’ll work through a complete workflow: - Loading and inspecting player statistics - Cleaning messy data - Creating a professional scatterplot - Adding a regression line to quantify the relationship\nBy the end, you’ll have a reusable template for exploring correlations in any sport or dataset.\n\n\n\n\nFirst, let’s load our basketball statistics and take a quick look at what we’re working with.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the data\ndf = pd.read_csv('player_stats.csv')\n\n# Display first few rows\nprint(df.head())\nHere’s what our dataset looks like:\n\n\n\nPlayer\nMinutes\nPoints\nRebounds\n\n\n\n\nLeBron James\n35.2\n27.1\n7.5\n\n\nStephen Curry\n34.3\n29.4\n5.2\n\n\nKevin Durant\n36.9\n29.7\n7.1\n\n\nGiannis Antetokounmpo\n32.8\n31.1\n11.6\n\n\nJoel Embiid\n33.1\n33.1\n10.2\n\n\n\nEach row represents a player’s per-game averages for the season.\n\n\n\n\nReal-world data is rarely perfect. Let’s check for issues and clean our dataset.\n# Check for missing values\nprint(df.isnull().sum())\n\n# Check data types\nprint(df.dtypes)\n\n# Remove any rows with missing values\ndf_clean = df.dropna()\n\n# Ensure Minutes and Points are numeric\ndf_clean['Minutes'] = pd.to_numeric(df_clean['Minutes'], errors='coerce')\ndf_clean['Points'] = pd.to_numeric(df_clean['Points'], errors='coerce')\n\n# Remove any rows that couldn't be converted to numeric\ndf_clean = df_clean.dropna()\n\nprint(f\"Dataset now has {len(df_clean)} complete records\") # Output: Dataset now has 20 complete records\nWhy this matters: Missing or incorrectly formatted data can cause errors or misleading visualizations. Always inspect and clean your data before analysis.\n\n\n\n\nNow for the fun part—visualizing the relationship between minutes played and points scored.\n# Create figure and axis\nplt.figure(figsize=(10, 6))\n\n# Create scatterplot\nplt.scatter(df_clean['Minutes'], df_clean['Points'], \n            alpha=0.6, s=100, color='steelblue', edgecolors='black')\n\n# Add labels and title\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Relationship Between Playing Time and Scoring', fontsize=14, fontweight='bold')\n\n# Add grid for readability\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\nHere’s what the visualization looks like:\n\n\n\nScatterplot showing the positive relationship between minutes played per game and points scored per game for NBA players\n\n\nThis scatterplot makes the positive relationship immediately visible—players who log more minutes tend to score more points.\n\n\n\n\nLet’s fit a regression line to quantify exactly how minutes relate to points.\n# Compute slope and intercept using NumPy\nx = df_clean['Minutes'].to_numpy()\ny = df_clean['Points'].to_numpy()\n\n# Calculate slope (m) and intercept (b) using least squares\nslope, intercept = np.polyfit(x, y, 1)\n\n# Compute predicted values for regression line\nline_x = np.array([x.min(), x.max()])\nline_y = slope * line_x + intercept\n\n# Compute R² manually\ny_pred = slope * x + intercept\nss_res = np.sum((y - y_pred) ** 2)\nss_tot = np.sum((y - np.mean(y)) ** 2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Plot scatterplot with regression line\nplt.figure(figsize=(10, 6))\nplt.scatter(x, y, alpha=0.6, s=100, color='steelblue', edgecolors='black', label='Players')\nplt.plot(line_x, line_y, color='red', linewidth=2, label='Regression Line')\n\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Minutes vs. Points with Regression Line', fontsize=14, fontweight='bold')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# Display the equation and R²\nprint(f\"Regression equation: Points = {intercept:.2f} + {slope:.2f} × Minutes\") # Output: Regression equation: Points = 22.58 + 0.14 × Minutes \nprint(f\"R² = {r_squared:.3f}\") # Output: R² = 0.006\n\n\n\nScatterplot with red regression line showing the linear relationship between playing time and scoring output\n\n\nThe regression line helps us quantify this relationship precisely.\n\n\nOur regression equation is:\n\\[\\text{Points} = \\beta_0 + \\beta_1 \\cdot \\text{Minutes}\\]\nWhere: - \\(\\beta_0\\) (intercept) represents the baseline points when minutes = 0 - \\(\\beta_1\\) (slope) tells us how many additional points we expect per additional minute played\nFor example, if our equation is:\n\\[\\text{Points} = -5.23 + 1.02 \\cdot \\text{Minutes}\\]\nThis means each additional minute played is associated with approximately 1.02 more points per game.\nThe \\(R^2\\) value tells us what percentage of the variation in points can be explained by minutes played. An \\(R^2\\) of 0.65 means minutes explain 65% of the scoring variation.\n\n\n\n\n\nCongratulations! You’ve just completed a full data analysis workflow:\n✅ Loaded and inspected real data\n✅ Cleaned and prepared it for analysis\n✅ Created a professional visualization\n✅ Quantified relationships with linear regression\n\n\nTry this yourself: Clone this GitHub repository and run the Jupyter notebook. Then, modify the code to explore different relationships:\n\nHockey fans: Download NHL data and analyze shots vs. goals\nSoccer enthusiasts: Explore assists vs. goals scored\nBaseball lovers: Investigate at-bats vs. home runs\n\nHave fun experimenting, and share your results with others, myself included!\nWant to go deeper? Check out these resources: - Pandas documentation on data cleaning - Matplotlib gallery for plot inspiration - Understanding correlation vs. causation\nHappy analyzing! 📊🏀\n\nPublished on October 24, 2025 | Walter Vogelmann",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#introduction",
    "href": "projects/data-tutorial-blog.html#introduction",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Have you ever wondered if playing more minutes actually leads to scoring more points in basketball? It seems obvious, but how strong is that relationship? In this tutorial, you’ll learn how to answer questions like this using Python, pandas, and matplotlib.\nWe’ll work through a complete workflow: - Loading and inspecting player statistics - Cleaning messy data - Creating a professional scatterplot - Adding a regression line to quantify the relationship\nBy the end, you’ll have a reusable template for exploring correlations in any sport or dataset.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-1-load-and-inspect-the-data",
    "href": "projects/data-tutorial-blog.html#step-1-load-and-inspect-the-data",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "First, let’s load our basketball statistics and take a quick look at what we’re working with.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the data\ndf = pd.read_csv('player_stats.csv')\n\n# Display first few rows\nprint(df.head())\nHere’s what our dataset looks like:\n\n\n\nPlayer\nMinutes\nPoints\nRebounds\n\n\n\n\nLeBron James\n35.2\n27.1\n7.5\n\n\nStephen Curry\n34.3\n29.4\n5.2\n\n\nKevin Durant\n36.9\n29.7\n7.1\n\n\nGiannis Antetokounmpo\n32.8\n31.1\n11.6\n\n\nJoel Embiid\n33.1\n33.1\n10.2\n\n\n\nEach row represents a player’s per-game averages for the season.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-2-clean-and-prepare-the-data",
    "href": "projects/data-tutorial-blog.html#step-2-clean-and-prepare-the-data",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Real-world data is rarely perfect. Let’s check for issues and clean our dataset.\n# Check for missing values\nprint(df.isnull().sum())\n\n# Check data types\nprint(df.dtypes)\n\n# Remove any rows with missing values\ndf_clean = df.dropna()\n\n# Ensure Minutes and Points are numeric\ndf_clean['Minutes'] = pd.to_numeric(df_clean['Minutes'], errors='coerce')\ndf_clean['Points'] = pd.to_numeric(df_clean['Points'], errors='coerce')\n\n# Remove any rows that couldn't be converted to numeric\ndf_clean = df_clean.dropna()\n\nprint(f\"Dataset now has {len(df_clean)} complete records\") # Output: Dataset now has 20 complete records\nWhy this matters: Missing or incorrectly formatted data can cause errors or misleading visualizations. Always inspect and clean your data before analysis.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-3-create-the-scatterplot",
    "href": "projects/data-tutorial-blog.html#step-3-create-the-scatterplot",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Now for the fun part—visualizing the relationship between minutes played and points scored.\n# Create figure and axis\nplt.figure(figsize=(10, 6))\n\n# Create scatterplot\nplt.scatter(df_clean['Minutes'], df_clean['Points'], \n            alpha=0.6, s=100, color='steelblue', edgecolors='black')\n\n# Add labels and title\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Relationship Between Playing Time and Scoring', fontsize=14, fontweight='bold')\n\n# Add grid for readability\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\nHere’s what the visualization looks like:\n\n\n\nScatterplot showing the positive relationship between minutes played per game and points scored per game for NBA players\n\n\nThis scatterplot makes the positive relationship immediately visible—players who log more minutes tend to score more points.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#step-4-quantify-the-relationship-with-linear-regression",
    "href": "projects/data-tutorial-blog.html#step-4-quantify-the-relationship-with-linear-regression",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Let’s fit a regression line to quantify exactly how minutes relate to points.\n# Compute slope and intercept using NumPy\nx = df_clean['Minutes'].to_numpy()\ny = df_clean['Points'].to_numpy()\n\n# Calculate slope (m) and intercept (b) using least squares\nslope, intercept = np.polyfit(x, y, 1)\n\n# Compute predicted values for regression line\nline_x = np.array([x.min(), x.max()])\nline_y = slope * line_x + intercept\n\n# Compute R² manually\ny_pred = slope * x + intercept\nss_res = np.sum((y - y_pred) ** 2)\nss_tot = np.sum((y - np.mean(y)) ** 2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Plot scatterplot with regression line\nplt.figure(figsize=(10, 6))\nplt.scatter(x, y, alpha=0.6, s=100, color='steelblue', edgecolors='black', label='Players')\nplt.plot(line_x, line_y, color='red', linewidth=2, label='Regression Line')\n\nplt.xlabel('Minutes Per Game', fontsize=12)\nplt.ylabel('Points Per Game', fontsize=12)\nplt.title('Minutes vs. Points with Regression Line', fontsize=14, fontweight='bold')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# Display the equation and R²\nprint(f\"Regression equation: Points = {intercept:.2f} + {slope:.2f} × Minutes\") # Output: Regression equation: Points = 22.58 + 0.14 × Minutes \nprint(f\"R² = {r_squared:.3f}\") # Output: R² = 0.006\n\n\n\nScatterplot with red regression line showing the linear relationship between playing time and scoring output\n\n\nThe regression line helps us quantify this relationship precisely.\n\n\nOur regression equation is:\n\\[\\text{Points} = \\beta_0 + \\beta_1 \\cdot \\text{Minutes}\\]\nWhere: - \\(\\beta_0\\) (intercept) represents the baseline points when minutes = 0 - \\(\\beta_1\\) (slope) tells us how many additional points we expect per additional minute played\nFor example, if our equation is:\n\\[\\text{Points} = -5.23 + 1.02 \\cdot \\text{Minutes}\\]\nThis means each additional minute played is associated with approximately 1.02 more points per game.\nThe \\(R^2\\) value tells us what percentage of the variation in points can be explained by minutes played. An \\(R^2\\) of 0.65 means minutes explain 65% of the scoring variation.",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  },
  {
    "objectID": "projects/data-tutorial-blog.html#conclusion-your-turn-to-explore",
    "href": "projects/data-tutorial-blog.html#conclusion-your-turn-to-explore",
    "title": "Data Tutorial Blog Project",
    "section": "",
    "text": "Congratulations! You’ve just completed a full data analysis workflow:\n✅ Loaded and inspected real data\n✅ Cleaned and prepared it for analysis\n✅ Created a professional visualization\n✅ Quantified relationships with linear regression\n\n\nTry this yourself: Clone this GitHub repository and run the Jupyter notebook. Then, modify the code to explore different relationships:\n\nHockey fans: Download NHL data and analyze shots vs. goals\nSoccer enthusiasts: Explore assists vs. goals scored\nBaseball lovers: Investigate at-bats vs. home runs\n\nHave fun experimenting, and share your results with others, myself included!\nWant to go deeper? Check out these resources: - Pandas documentation on data cleaning - Matplotlib gallery for plot inspiration - Understanding correlation vs. causation\nHappy analyzing! 📊🏀\n\nPublished on October 24, 2025 | Walter Vogelmann",
    "crumbs": [
      "Data Tutorial Blog Project"
    ]
  }
]